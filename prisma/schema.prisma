
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Post {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  createdById String
  createdBy   User   @relation(fields: [createdById], references: [id])

  @@index([name])
}

model User {
  id            String    @id
  name          String
  email         String
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  Session       Session[]
  Account       Account[]
  Post          Post[]

  cases         Case[] 

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  token     String
  createdAt DateTime
  updatedAt DateTime

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  expiresAt             DateTime?
  password              String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String   @id
  identifier String
  value      String
  expiresAt  DateTime

  createdAt DateTime?
  updatedAt DateTime?

  @@map("verification")
}
model Country {
  id        String   @id @default(uuid()) // Or Int @id @default(autoincrement())
  name      String   @unique // e.g., "Venezuela", "Colombia", "United States"
  isoCode   String   @unique // e.g., "VE", "CO", "US" (ISO 3166-1 alpha-2)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  cases     Case[]
}

model AreaOfLaw {
  id          String   @id @default(uuid())
  code        String   @unique 
  description String?  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  cases       Case[]
}

model Case {
  id                   String    @id @default(uuid()) // Or Int @id @default(autoincrement())
  userId               String    // Foreign key to your existing User model
  user                 User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  countryId            String
  country              Country   @relation(fields: [countryId], references: [id])

  areaOfLawId          String?
  areaOfLaw            AreaOfLaw? @relation(fields: [areaOfLawId], references: [id])

  caseName             String
  clientName           String?
  caseDescriptionInput String    @db.Text // Primary input for AI (ES search)
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt

  userLinkedLaws     UserLinkedLaw[]
  caseGeneralNotes   CaseGeneralNote[]

  @@index([userId])
  @@index([countryId])
  @@index([areaOfLawId])
}

model UserLinkedLaw {
  id                          String    @id @default(uuid())
  caseId                      String
  case                        Case      @relation(fields: [caseId], references: [id], onDelete: Cascade)
  elasticsearchLawArticleId   String    
  lawTitleCache               String?   @db.VarChar(512)
  articleNumberCache          String?   @db.VarChar(50)
  userNotesOnLink             String?   @db.Text
  linkedAt                    DateTime  @default(now())

  @@unique([caseId, elasticsearchLawArticleId])
  @@index([caseId])
  @@index([elasticsearchLawArticleId])
}

model CaseGeneralNote {
  id           String   @id @default(uuid())
  caseId       String
  case         Case     @relation(fields: [caseId], references: [id], onDelete: Cascade)
  noteContent  String   @db.Text
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@index([caseId])
}